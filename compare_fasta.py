from Bio import SeqIO
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord
import argparse
import statistics

def get_options():
    description = "Determines 3' accuracy for prodigal and ggCaller gene calls."
    parser = argparse.ArgumentParser(description=description,
                                     prog='python compare_fasta.py')

    IO = parser.add_argument_group('Input/options.out')
    IO.add_argument('--seq',
                    help='Reference sequences genes called from (FASTA format)')
    IO.add_argument('--genes',
                    help='Reference gene panel (FASTA format)')
    IO.add_argument('--query',
                    help='Genes generated by gene caller to query (FASTA format)')
    IO.add_argument('--caller',
                    type=str,
                    choices=['prod', 'ggc', 'pan'],
                    help='Gene caller used. Can be either \'prod\' for Prodigal, \'ggc\' for ggCaller or \'pan\' for Panaroo.')
    IO.add_argument('--min-size',
                    type=int,
                    default=90,
                    help='Minimum gene length to include. '
                    '[Default = 90] ')
    IO.add_argument('--vers',
                    type=float,
                    default=-1.0,
                    help='If using ggCaller specify version in X.X format (e.g. 0.1, 1.0, 1.2) ')
    IO.add_argument('--exact',
                    default=False,
                    action="store_true",
                    help='Rather than 3-prime accuracy, conduct exact matching. ')
    IO.add_argument('--outpref',
                    default="compare_fasta_out",
                    help='Out prefix. Default = "compare_fasta_out". ')
    return parser.parse_args()

def remove_invalid(query_seq):
    import re
    start_codons = ["ATG", "GTG", "TTG"]
    stop_codons = ["TAA", "TGA", "TAG"]
    # check if codons in right place, and in correct frame
    if query_seq[0:3] not in start_codons or query_seq[-3:] not in stop_codons or len(query_seq) % 3 != 0:
        return False

    # check if sequence contains a premature stop codon
    for stop in stop_codons:
        stop_indices = [m.start() for m in re.finditer(stop, query_seq)]
        # remove last stop as this is valid
        if query_seq[-3:] == stop:
            stop_indices = stop_indices[:-1]
        if any([i % 3 == 0 for i in stop_indices]):
            return False

    # If all tests come back fine, return true
    return True

def compare_3prime(genome_fasta, ref_fasta, query_fasta, caller_type, min_size, ggcaller_version, outpref):
    # generate lists to hold gene coordinates
    genome_list = []
    genome_rec = {}
    ref_rec = {}
    query_rec = {}

    total_correct_query_records = 0
    total_ref_records = 0
    total_query_records = 0
    total_unmatched_query_records = 0

    unmatched_query_list = []
    unmatched_ref_list = []
    incorrect_query_list = []

    # parse genome_fasta
    id_dict = {}
    id_num = 0
    for rec in SeqIO.parse(genome_fasta, "fasta"):
        description = (rec.description).split("_")
        id = description[0]
        # if genome not found before, add to list.
        if id not in genome_list:
            genome_list.append(id)
            genome_rec[id] = str(rec.seq)
            ref_rec[id] = {}
            query_rec[id] = {}
            id_dict[id_num] = id
            id_num += 1
        # if genome made up of multiple contigs, just concatenate the string together to enable searching.
        else:
            genome_rec[id] += str(rec.seq)

    # parse ref_fasta
    for rec in SeqIO.parse(ref_fasta, "fasta"):
        description = (rec.description).split("_")
        id = description[0]

        if len(str(rec.seq)) < min_size:
           continue


        # look for the 3prime index of the string
        start_index = genome_rec[id].find(str(rec.seq))
        if start_index == -1:
            prime3 = genome_rec[id].find(str(rec.seq.reverse_complement()))
        else:
            prime3 = start_index + (len(str(rec.seq)) - 1)
        #check that sequence is present in genome is says, and that the gene sequence is valid and no Ns present. Also check that no duplicate entries, as ggc can't call duplicate genes
        if prime3 != -1 and remove_invalid(str(rec.seq)) and "N" not in str(rec.seq) and prime3 not in ref_rec[id]:
            ref_rec[id][prime3] = str(rec.seq)
            total_ref_records += 1
            unmatched_ref_list.append((id, str(rec.seq)))

    if caller_type == "ggc":
        if ggcaller_version < 1:
            # parse query_fasta
            for rec in SeqIO.parse(query_fasta, "fasta"):
                colours = (((((rec.description.strip()).split("["))[4]).replace("]", "")).replace("'", "")).replace(", ", "")
                colours = list(colours)

                for index, col in enumerate(colours):
                    if col == "1":
                        id = genome_list[index]
                        # look for the 3prime index of the string
                        start_index = genome_rec[id].find(str(rec.seq))
                        if start_index == -1:
                            prime3 = genome_rec[id].find(str(rec.seq.reverse_complement()))
                        else:
                            prime3 = start_index + (len(str(rec.seq)) - 1)

                        # determine if gene sequence is real, if not add to incorrect_query_list
                        if prime3 != -1:
                            query_rec[id][prime3] = str(rec.seq)
                        else:
                            incorrect_query_list.append((id, str(rec.seq)))
        elif 1 <= ggcaller_version < 1.2:
            # parse query_fasta
            for rec in SeqIO.parse(query_fasta, "fasta"):
                description = (rec.description).split("_")
                colours = description[2]

                for index, col in enumerate(colours):
                    if col == "1":
                        id = genome_list[index]
                        # look for the 3prime index of the string
                        start_index = genome_rec[id].find(str(rec.seq))
                        if start_index == -1:
                            prime3 = genome_rec[id].find(str(rec.seq.reverse_complement()))
                        else:
                            prime3 = start_index + (len(str(rec.seq)) - 1)

                        # determine if gene sequence is real, if not add to incorrect_query_list
                        if prime3 != -1:
                            query_rec[id][prime3] = str(rec.seq)
                        else:
                            incorrect_query_list.append((id, str(rec.seq)))
        elif 1.2 <= ggcaller_version < 1.3:
            # parse query_fasta
            for rec in SeqIO.parse(query_fasta, "fasta"):
                description = (rec.description).split("_")
                colours = description[1]

                for index, col in enumerate(colours):
                    if col == "1":
                        id = genome_list[index]
                        # look for the 3prime index of the string
                        start_index = genome_rec[id].find(str(rec.seq))
                        if start_index == -1:
                            prime3 = genome_rec[id].find(str(rec.seq.reverse_complement()))
                        else:
                            prime3 = start_index + (len(str(rec.seq)) - 1)

                        # determine if gene sequence is real, if not add to incorrect_query_list
                        if prime3 != -1:
                            query_rec[id][prime3] = str(rec.seq)
                        else:
                            incorrect_query_list.append((id, str(rec.seq)))
        elif 1.3 <= ggcaller_version < 1.4:
            # parse query_fasta
            for rec in SeqIO.parse(query_fasta, "fasta"):
                id = rec.id.split('_')[0]

                # look for the 3prime index of the string
                start_index = genome_rec[id].find(str(rec.seq))
                if start_index == -1:
                    prime3 = genome_rec[id].find(str(rec.seq.reverse_complement()))
                else:
                    prime3 = start_index + (len(str(rec.seq)) - 1)

                # determine if gene sequence is real, if not add to incorrect_query_list
                if prime3 != -1:
                    query_rec[id][prime3] = str(rec.seq)
                else:
                    incorrect_query_list.append((id, str(rec.seq)))
        else:
            print("Please specific ggCaller version in form '1.X'")

    elif caller_type == "prod":
        # parse query_fasta
        for rec in SeqIO.parse(query_fasta, "fasta"):
            description = (rec.description).split("_")
            id = description[0]

            # look for the 3prime index of the string
            start_index = genome_rec[id].find(str(rec.seq))
            if start_index == -1:
                prime3 = genome_rec[id].find(str(rec.seq.reverse_complement()))
            else:
                prime3 = start_index + (len(str(rec.seq)) - 1)
            if remove_invalid(str(rec.seq)) and "N" not in str(rec.seq) and prime3 not in query_rec[id]:
                query_rec[id][prime3] = str(rec.seq)
            else:
                incorrect_query_list.append((id, str(rec.seq)))

    elif caller_type == "pan":
        # parse query_fasta
        for rec in SeqIO.parse(query_fasta, "fasta"):
            description = (rec.id).split("_")
            id = description[0]

            # look for the 3prime index of the string
            start_index = genome_rec[id].find(str(rec.seq))
            if start_index == -1:
                prime3 = genome_rec[id].find(str(rec.seq.reverse_complement()))
            else:
                prime3 = start_index + (len(str(rec.seq)) - 1)
            if remove_invalid(str(rec.seq)) and "N" not in str(rec.seq) and prime3 not in query_rec[id]:
                query_rec[id][prime3] = str(rec.seq)
            else:
                incorrect_query_list.append((id, str(rec.seq)))

    # iterate over query_rec, count number of times each 3prime match found
    for colour, prime3_dict in query_rec.items():
        for prime3_key in prime3_dict.keys():
            if prime3_key in ref_rec[colour]:
                total_correct_query_records += 1
                unmatched_ref_list.remove((colour, ref_rec[colour][prime3_key]))
            else:
                total_unmatched_query_records += 1
                unmatched = (colour, prime3_dict[prime3_key])
                unmatched_query_list.append(unmatched)
            total_query_records += 1

    total_query_records += len(incorrect_query_list)

    recall = total_correct_query_records / total_ref_records
    precision = total_correct_query_records / total_query_records

    with open(outpref + "_summary.txt", "w") as f:
        f.write("Total_true\t{}".format(total_ref_records) + "\n")
        f.write("Total_called\t{}".format(total_query_records) + "\n")
        f.write("TP\t{}".format(total_correct_query_records) + "\n")
        f.write("FP\t{}".format(total_query_records - total_correct_query_records) + "\n")
        f.write("FN\t{}".format(total_ref_records - total_correct_query_records) + "\n")
        f.write("Artifical\t{}".format(len(incorrect_query_list)) + "\n")
        f.write("Recall\t{}".format(recall) + "\n")
        f.write("Precision\t{}".format(precision) + "\n")

    # print false negatives
    DNA_records = []
    for entry in unmatched_ref_list:
        DNA_records.append(SeqRecord(Seq(entry[1]), id=entry[0], description=""))
    SeqIO.write(DNA_records, outpref + "_FN.fasta", "fasta")

    # print false positives
    DNA_records = []
    for entry in unmatched_query_list:
        DNA_records.append(SeqRecord(Seq(entry[1]), id=entry[0], description=""))
    SeqIO.write(DNA_records, outpref + "_FP.fasta", "fasta")

    # print artificial
    DNA_records = []
    for entry in incorrect_query_list:
        DNA_records.append(SeqRecord(Seq(entry[1]), id=entry[0], description=""))
    SeqIO.write(DNA_records, outpref + "_ART.fasta", "fasta")

def compare_exact(genome_fasta, ref_fasta, query_fasta, caller_type, min_size, ggcaller_version, outpref):
    # generate lists to hold gene coordinates
    genome_list = []
    genome_rec = {}
    ref_rec = {}
    query_rec = {}

    total_correct_query_records = 0
    total_ref_records = 0
    total_query_records = 0
    total_unmatched_query_records = 0

    unmatched_query_list = []
    unmatched_ref_list = []
    incorrect_query_list = []

    # parse genome_fasta
    id_dict = {}
    id_num = 0
    for rec in SeqIO.parse(genome_fasta, "fasta"):
        description = (rec.description).split("_")
        id = description[0]
        # if genome not found before, add to list.
        if id not in genome_list:
            genome_list.append(id)
            genome_rec[id] = str(rec.seq)
            ref_rec[id] = {}
            query_rec[id] = {}
            id_dict[id_num] = id
            id_num += 1
        # if genome made up of multiple contigs, just concatenate the string together to enable searching.
        else:
            genome_rec[id] += str(rec.seq)

    # parse ref_fasta
    for rec in SeqIO.parse(ref_fasta, "fasta"):
        description = (rec.description).split("_")
        id = description[0]

        if len(str(rec.seq)) < min_size:
           continue

        # look for the 3prime index of the string
        start_index = genome_rec[id].find(str(rec.seq))
        if start_index == -1:
            prime3 = genome_rec[id].find(str(rec.seq.reverse_complement()))
        else:
            prime3 = start_index + (len(str(rec.seq)) - 1)
        # check that sequence is present in genome is says, and that the gene sequence is valid and no Ns present. Also check that no duplicate entries, as ggc can't call duplicate genes
        if prime3 != -1 and remove_invalid(str(rec.seq)) and "N" not in str(rec.seq) and prime3 not in ref_rec[id]:
            ref_rec[id][prime3] = str(rec.seq)
            total_ref_records += 1
            unmatched_ref_list.append((id, str(rec.seq)))

    if caller_type == "ggc":
        if ggcaller_version < 1:
            # parse query_fasta
            for rec in SeqIO.parse(query_fasta, "fasta"):
                colours = (((((rec.description.strip()).split("["))[4]).replace("]", "")).replace("'", "")).replace(", ", "")
                colours = list(colours)

                for index, col in enumerate(colours):
                    if col == "1":
                        id = genome_list[index]
                        # look for the 3prime index of the string
                        start_index = genome_rec[id].find(str(rec.seq))
                        if start_index == -1:
                            prime3 = genome_rec[id].find(str(rec.seq.reverse_complement()))
                        else:
                            prime3 = start_index + (len(str(rec.seq)) - 1)

                        # determine if gene sequence is real, if not add to incorrect_query_list
                        if prime3 != -1:
                            query_rec[id][prime3] = str(rec.seq)
                        else:
                            incorrect_query_list.append((id, str(rec.seq)))
        elif 1 <= ggcaller_version < 1.2:
            # parse query_fasta
            for rec in SeqIO.parse(query_fasta, "fasta"):
                description = (rec.description).split("_")
                colours = description[2]

                for index, col in enumerate(colours):
                    if col == "1":
                        id = genome_list[index]
                        # look for the 3prime index of the string
                        start_index = genome_rec[id].find(str(rec.seq))
                        if start_index == -1:
                            prime3 = genome_rec[id].find(str(rec.seq.reverse_complement()))
                        else:
                            prime3 = start_index + (len(str(rec.seq)) - 1)

                        # determine if gene sequence is real, if not add to incorrect_query_list
                        if prime3 != -1:
                            query_rec[id][prime3] = str(rec.seq)
                        else:
                            incorrect_query_list.append((id, str(rec.seq)))
        elif 1.2 <= ggcaller_version < 1.3:
            # parse query_fasta
            for rec in SeqIO.parse(query_fasta, "fasta"):
                description = (rec.description).split("_")
                colours = description[1]

                for index, col in enumerate(colours):
                    if col == "1":
                        id = genome_list[index]
                        # look for the 3prime index of the string
                        start_index = genome_rec[id].find(str(rec.seq))
                        if start_index == -1:
                            prime3 = genome_rec[id].find(str(rec.seq.reverse_complement()))
                        else:
                            prime3 = start_index + (len(str(rec.seq)) - 1)

                        # determine if gene sequence is real, if not add to incorrect_query_list
                        if prime3 != -1:
                            query_rec[id][prime3] = str(rec.seq)
                        else:
                            incorrect_query_list.append((id, str(rec.seq)))
        elif 1.3 <= ggcaller_version < 1.4:
            # parse query_fasta
            for rec in SeqIO.parse(query_fasta, "fasta"):
                id = rec.id.split('_')[0]

                # look for the 3prime index of the string
                start_index = genome_rec[id].find(str(rec.seq))
                if start_index == -1:
                    prime3 = genome_rec[id].find(str(rec.seq.reverse_complement()))
                else:
                    prime3 = start_index + (len(str(rec.seq)) - 1)

                # determine if gene sequence is real, if not add to incorrect_query_list
                if prime3 != -1:
                    query_rec[id][prime3] = str(rec.seq)
                else:
                    incorrect_query_list.append((id, str(rec.seq)))
        else:
            print("Please specific ggCaller version in form '1.X'")

    elif caller_type == "prod":
        # parse query_fasta
        for rec in SeqIO.parse(query_fasta, "fasta"):
            description = (rec.id).split("_")
            id = description[0]

            # look for the 3prime index of the string
            start_index = genome_rec[id].find(str(rec.seq))
            if start_index == -1:
                prime3 = genome_rec[id].find(str(rec.seq.reverse_complement()))
            else:
                prime3 = start_index + (len(str(rec.seq)) - 1)
            if remove_invalid(str(rec.seq)) and "N" not in str(rec.seq) and prime3 not in query_rec[id]:
                query_rec[id][prime3] = str(rec.seq)
            else:
                incorrect_query_list.append((id, str(rec.seq)))

    elif caller_type == "pan":
        # parse query_fasta
        for rec in SeqIO.parse(query_fasta, "fasta"):
            description = (rec.id).split("_")
            id = description[0]

            # look for the 3prime index of the string
            start_index = genome_rec[id].find(str(rec.seq))
            if start_index == -1:
                prime3 = genome_rec[id].find(str(rec.seq.reverse_complement()))
            else:
                prime3 = start_index + (len(str(rec.seq)) - 1)
            if remove_invalid(str(rec.seq)) and "N" not in str(rec.seq) and prime3 not in query_rec[id]:
                query_rec[id][prime3] = str(rec.seq)
            else:
                incorrect_query_list.append((id, str(rec.seq)))

    prop_length = []
    # iterate over query_rec, count number of times each 3prime match found
    for colour, prime3_dict in query_rec.items():
        for prime3_key, seq in prime3_dict.items():
            if prime3_key in ref_rec[colour]:
                ref_seq = ref_rec[colour][prime3_key]
                if ref_seq == seq:
                    total_correct_query_records += 1
                    unmatched_ref_list.remove((colour, ref_rec[colour][prime3_key]))
                else:

                    total_unmatched_query_records += 1
                    unmatched = (colour, prime3_dict[prime3_key])
                    unmatched_query_list.append(unmatched)
                #propor_length = len(seq) / len(ref_seq)
                prop_length.append(len(seq) / len(ref_seq))
            else:
                total_unmatched_query_records += 1
                unmatched = (colour, prime3_dict[prime3_key])
                unmatched_query_list.append(unmatched)
            total_query_records += 1

    total_query_records += len(incorrect_query_list)

    recall = total_correct_query_records / total_ref_records
    precision = total_correct_query_records / total_query_records

    mean_prop_length = statistics.mean(prop_length)
    stdev_prop_length = statistics.stdev(prop_length)

    with open(outpref + "_summary.txt", "w") as f:
        f.write("Total_true\t{}".format(total_ref_records) + "\n")
        f.write("Total_called\t{}".format(total_query_records) + "\n")
        f.write("TP\t{}".format(total_correct_query_records) + "\n")
        f.write("FP\t{}".format(total_query_records - total_correct_query_records) + "\n")
        f.write("FN\t{}".format(total_ref_records - total_correct_query_records) + "\n")
        f.write("Artifical\t{}".format(len(incorrect_query_list)) + "\n")
        f.write("Recall\t{}".format(recall) + "\n")
        f.write("Precision\t{}".format(precision) + "\n")
        f.write("Mean_len_prop\t{}".format(mean_prop_length) + "\n")
        f.write("Stdev_len_prop\t{}".format(stdev_prop_length) + "\n")

    # print false negatives
    DNA_records = []
    for entry in unmatched_ref_list:
        DNA_records.append(SeqRecord(Seq(entry[1]), id=entry[0], description=""))
    SeqIO.write(DNA_records, outpref + "_FN.fasta", "fasta")

    # print false positives
    DNA_records = []
    for entry in unmatched_query_list:
        DNA_records.append(SeqRecord(Seq(entry[1]), id=entry[0], description=""))
    SeqIO.write(DNA_records, outpref + "_FP.fasta", "fasta")

    # print artificial
    DNA_records = []
    for entry in incorrect_query_list:
        DNA_records.append(SeqRecord(Seq(entry[1]), id=entry[0], description=""))
    SeqIO.write(DNA_records, outpref + "_ART.fasta", "fasta")

    with open(outpref + "_len_prop.txt", "w") as f:
        for entry in prop_length:
            f.write(str(entry) + "\n")

def main():
    options = get_options()
    if options.caller not in ("ggc", "prod", "pan"):
        print("Please specify --caller as either \'prod\', \'ggc\' or \'pan\'")
        return 1
    else:
        if options.caller == "ggc" and (options.vers < 0 or options.vers > 1.3):
            print("Please specify correct ggCaller version.")
            return 1
        else:
            if options.exact:
                compare_exact(options.seq, options.genes, options.query, options.caller,
                                              options.min_size, options.vers, options.outpref)
            else:
                compare_3prime(options.seq, options.genes, options.query, options.caller, options.min_size, options.vers, options.outpref)
    return 0

if __name__ == '__main__':
    main()
    # output_tuple = compare_exact("Pneumo_capsular_data/group3_capsular_seqs.fasta", "Pneumo_capsular_data/group3_capsular_CDS.fasta", "ggCaller_publication/ggc_group3_unfragmented.ffn", "ggc",
    #                              90, 1.3, "test")
    # output_tuple = compare_3prime("Pneumo_capsular_data/group3_capsular_seqs.fasta", "Pneumo_capsular_data/group3_capsular_CDS.fasta", "ggCaller_publication/ggc_group3_unfragmented.ffn", "ggc",
    #                              90, 1.3, "test")



